<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024牛客寒假算法基础集训营6</title>
    <url>/2024/03/01/2024%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A5%206/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; pr;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">not_pr</span><span class="params">(N)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> getpr = [&amp;](<span class="type">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!not_pr[i])</span><br><span class="line">                pr.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> p : pr)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i * p &gt; n)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                not_pr[i * p] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (i % p == <span class="number">0</span>) <span class="comment">// 说明i*p已经被一个更小的i判断过了</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">getpr</span>(<span class="number">100</span>);</span><br><span class="line">    ll l, r;</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pr.<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; pr.<span class="built_in">size</span>(); j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j + <span class="number">1</span>; k &lt; pr.<span class="built_in">size</span>(); k++)</span><br><span class="line">            &#123;</span><br><span class="line">                ll res = pr[i] * pr[j] * pr[k];</span><br><span class="line">                <span class="keyword">if</span> (res &gt;= l &amp;&amp; res &lt;= r)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>对b数组的每个数找最接近的a</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n, <span class="number">0</span>)</span>, <span class="title">b</span><span class="params">(n, <span class="number">0</span>)</span>, <span class="title">c</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">    c = a;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>, mi = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> pos = <span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), b[i]) - a.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">if</span> (pos &lt; n)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(b[i] - a[pos]) &lt; mi)</span><br><span class="line">                mi = <span class="built_in">abs</span>(b[i] - a[pos]), p1 = i, p2 = a[pos];</span><br><span class="line">        <span class="keyword">if</span> (pos - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(b[i] - a[pos - <span class="number">1</span>]) &lt; mi)</span><br><span class="line">                mi = <span class="built_in">abs</span>(b[i] - a[pos - <span class="number">1</span>]), p1 = i, p2 = a[pos - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (c[i] == p2)</span><br><span class="line">        &#123;</span><br><span class="line">            p2 = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">swap</span>(c[p1], c[p2]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : c)</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>类似二进制,从大到小组合即可</p>
<p>证明类似二进制背包  <del>显然</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls(x) (a[x].l)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs(x) (a[x].r)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sum(x) a[x].sum</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">100</span>, M = <span class="number">25</span>;</span><br><span class="line">random_device rd;</span><br><span class="line"><span class="function">mt19937_64 <span class="title">gen</span><span class="params">(rd())</span></span>;</span><br><span class="line">ll f[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">45</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (n &gt;= f[i] &amp;&amp; ans.<span class="built_in">size</span>() &lt; <span class="number">3</span>)</span><br><span class="line">            n -= f[i], ans.<span class="built_in">push_back</span>(f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans)</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>, f[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">45</span>; i++)</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>];</span><br><span class="line">    <span class="comment">// cout &lt;&lt; setprecision(5);</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">     cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span> (_--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>两种情况,自己让二追三,对面让二追三</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    db p;</span><br><span class="line">    cin &gt;&gt; p;</span><br><span class="line">    db res = (<span class="number">1</span> - p) * (<span class="number">1</span> - p) * p * p * p;</span><br><span class="line">    res += p * p * (<span class="number">1</span> - p) * (<span class="number">1</span> - p) * (<span class="number">1</span> - p);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><p>模拟</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1, s2;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : s1)</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; i &gt;= <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            x = x * <span class="number">10</span> + i - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">   </span><br><span class="line">    x=x/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : s2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">            k++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            y++;</span><br><span class="line">        <span class="keyword">if</span> (k == x)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;kou!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; k + y &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y == x)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;yukari!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; k + y &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;to be continued.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s2.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><p>有相同质因子的数一定是要放在一起,感觉难点在于怎样实现</p>
<p>预处理$10^3$以内的所有质数(大于$\sqrt n$的质因数只有一个)</p>
<p>对每个数分解质因数,然后bfs每个质因数能拓展到哪些数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls(x) (a[x].l)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs(x) (a[x].r)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sum(x) a[x].sum</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">100</span>, M = <span class="number">25</span>;</span><br><span class="line">random_device rd;</span><br><span class="line"><span class="function">mt19937_64 <span class="title">gen</span><span class="params">(rd())</span></span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pr;</span><br><span class="line"><span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">not_pr</span><span class="params">(N, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getpr</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!not_pr[i])</span><br><span class="line">            pr.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p : pr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * p &gt; n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            not_pr[i * p] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p == <span class="number">0</span>) <span class="comment">// 说明i*p已经被一个更小的i判断过了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> cal = [&amp;](<span class="type">int</span> x) -&gt; vector&lt;<span class="type">int</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : pr)</span><br><span class="line">            <span class="keyword">if</span> (x % p == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(p);</span><br><span class="line">                <span class="keyword">while</span> (x % p == <span class="number">0</span>)</span><br><span class="line">                    x /= p;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">1</span>)</span><br><span class="line">            res.<span class="built_in">push_back</span>(x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> n, t;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;ll&gt; ans1, ans2;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; fac;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">bel</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        a.<span class="built_in">push_back</span>(x);</span><br><span class="line">        fac.<span class="built_in">push_back</span>(<span class="built_in">cal</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    bel[<span class="number">0</span>] = <span class="number">1</span>, t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : fac[<span class="number">0</span>])</span><br><span class="line">        st.<span class="built_in">insert</span>(x);</span><br><span class="line">    <span class="keyword">while</span> (t)</span><br><span class="line">    &#123;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (!bel[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> x : fac[i])</span><br><span class="line">                    <span class="keyword">if</span> (st.<span class="built_in">count</span>(x))</span><br><span class="line">                    &#123;</span><br><span class="line">                        bel[i] = <span class="number">1</span>, t = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">auto</span> e : fac[i])</span><br><span class="line">                            st.<span class="built_in">insert</span>(e);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (bel[i])</span><br><span class="line">            ans1.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans2.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    <span class="keyword">if</span> (ans1.<span class="built_in">empty</span>() || ans2.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1 -1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans1.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans2.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans1)</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans2)</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getpr</span>(<span class="number">1e3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span> (_--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><p>构造类似2,1,2,1,2,1,2</p>
<p>最少需要2k+1个空,数组和至少需要n+k+1(2,1,2,1,1,1)</p>
<p>如果k为0要特判,否则如果s&#x3D;n,会有n+0+1&gt;s,但实际上只需要n(1,1,1,1)</p>
<p>接下来考虑怎样构造</p>
<p>先构造k个三元组,奇数位取尽可能大,偶数位取1</p>
<p>如果2k+1&lt;n,直接全部放到后面</p>
<p>如果2k+1&#x3D;n,均匀的放在偶数位</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, s, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s &gt;&gt; k;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> * k + <span class="number">1</span> &gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k &amp;&amp; n + k + <span class="number">1</span> &gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> add = s - (n - (k + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k + <span class="number">1</span>; i++)</span><br><span class="line">        ans[<span class="number">2</span> * i - <span class="number">1</span>] = add / (k + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        ans[<span class="number">2</span> * i] = <span class="number">1</span>;</span><br><span class="line">    s -= ((add / (k + <span class="number">1</span>)) * (k + <span class="number">1</span>)) + k;</span><br><span class="line">    <span class="keyword">if</span> (s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">2</span> * k + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> num = n - (<span class="number">2</span> * k + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span> * k + <span class="number">2</span>, mo = s % num; i &lt;= n; i++, mo--)</span><br><span class="line">                ans[i] = s / num + (mo &gt; <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, mo = s % k; i &lt;= k; i++, mo--)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[<span class="number">2</span> * i] += s / k + (mo &gt; <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (ans[<span class="number">2</span> * i] &gt;= ans[<span class="number">2</span> * i - <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="H"><a href="#H" class="headerlink" title="H"></a>H</h1><p>首先要会求直线与圆的交点个数</p>
<p>设直线的与圆的交点数量为x</p>
<p>那么这条直线对答案的贡献是$x*\frac{n-2}{C(n,3)}$</p>
<p>但是有种特别情况,点恰好在圆上,这样他会多贡献$C(n,m)$,需要减去</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span></span><br><span class="line">&#123;</span><br><span class="line">    ll x, y;</span><br><span class="line">    <span class="built_in">P</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">P</span>(ll _x, ll _y) : <span class="built_in">x</span>(_x), <span class="built_in">y</span>(_y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">C</span></span><br><span class="line">&#123;</span><br><span class="line">    ll r, x, y;</span><br><span class="line">    <span class="built_in">C</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">C</span>(ll r, ll x, ll y) : <span class="built_in">r</span>(r), <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cl</span><span class="params">(P p1,P p2,C c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res1=(p1.x-c.x)*(p1.x-c.x)+(p1.y-c.y)*(p1.y-c.y);</span><br><span class="line">    ll res2=(p2.x-c.x)*(p2.x-c.x)+(p2.y-c.y)*(p2.y-c.y);</span><br><span class="line">    <span class="type">bool</span> flag1=res1&lt;c.r*c.r;</span><br><span class="line">    <span class="type">bool</span> flag2=res2&lt;c.r*c.r;</span><br><span class="line">    <span class="keyword">if</span>(flag1&amp;&amp;flag2)    <span class="comment">//情况一、两点都在圆内 :一定不相交 </span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(flag1||flag2) <span class="comment">//情况二、一个点在圆内，一个点在圆外：一定相交 </span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//情况三、两个点都在圆外 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">__int128_t</span> A,B,C,dist1,dist2,angle1,angle2;</span><br><span class="line">        <span class="comment">//将直线p1p2化为一般式：Ax+By+C=0的形式。先化为两点式，然后由两点式得出一般式 </span></span><br><span class="line">        A=p1.y-p2.y;</span><br><span class="line">        B=p2.x-p1.x;</span><br><span class="line">        C=p1.x*p2.y-p2.x*p1.y;</span><br><span class="line">        <span class="comment">//使用距离公式判断圆心到直线ax+by+c=0的距离是否大于半径 </span></span><br><span class="line">        dist1=A*c.x+B*c.y+C;</span><br><span class="line">        dist1*=dist1;</span><br><span class="line">        dist2=(A*A+B*B)*c.r*c.r;</span><br><span class="line">        <span class="keyword">if</span>(dist1&gt;dist2)<span class="comment">//圆心到直线p1p2的距离大于半径，不相交 </span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//角cp1p2和cp2p1余弦正负性，余弦定理一通化简</span></span><br><span class="line">        angle1=(c.x-p1.x)*(p2.x-p1.x)+(c.y-p1.y)*(p2.y-p1.y);</span><br><span class="line">        angle2=(c.x-p2.x)*(p1.x-p2.x)+(c.y-p2.y)*(p1.y-p2.y);</span><br><span class="line">        <span class="keyword">if</span>(angle1&gt;<span class="number">0</span>&amp;&amp;angle2&gt;<span class="number">0</span>)<span class="comment">//余弦为正，则是锐角，一定相交 </span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dist1==dist2) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(res1==c.r*c.r||res2==c.r*c.r) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    C c;</span><br><span class="line">    cin &gt;&gt; c.x &gt;&gt; c.y &gt;&gt; c.r;</span><br><span class="line"></span><br><span class="line">    ll n, cnt = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;P&gt; <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : p)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        ll dx=c.x-x,dy=c.y-y;</span><br><span class="line">        <span class="keyword">if</span> (dx * dx + dy * dy == c.r * c.r)</span><br><span class="line">            cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    db ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">                ans += <span class="built_in">cl</span>(p[i], p[j], c);</span><br><span class="line">    ans = ans * <span class="number">6.</span> / (n * (n - <span class="number">1</span>));</span><br><span class="line">    ans -= cnt * <span class="number">3.</span> / n;<span class="comment">//num*C(n,2)*((n-2)/C(n,3))</span></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><p>答案只有几种情况</p>
<p>最大字段和mx,最小字段和mi</p>
<p>mx(+)*mx(+)</p>
<p>mi(-)*mi(-)</p>
<p>mx(-)*mi(+)</p>
<p>求出a,b的最大最小字段和,然后暴力枚举四种情况求max</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ll t1[<span class="number">2</span>], t2[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span>, <span class="title">b</span><span class="params">(m + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">    <span class="keyword">auto</span> dpmx = [&amp;](vector&lt;ll&gt; &amp;s, <span class="type">int</span> n) -&gt; ll</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;ll&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            f[i] = <span class="built_in">max</span>(s[i], f[i - <span class="number">1</span>] + s[i]);</span><br><span class="line">        <span class="keyword">return</span> *<span class="built_in">max_element</span>(f.<span class="built_in">begin</span>() + <span class="number">1</span>, f.<span class="built_in">end</span>());</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> dpmi = [&amp;](vector&lt;ll&gt; &amp;s, <span class="type">int</span> n) -&gt; ll</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;ll&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            f[i] = <span class="built_in">min</span>(s[i], f[i - <span class="number">1</span>] + s[i]);</span><br><span class="line">        <span class="keyword">return</span> *<span class="built_in">min_element</span>(f.<span class="built_in">begin</span>() + <span class="number">1</span>, f.<span class="built_in">end</span>());</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    t1[<span class="number">0</span>] = <span class="built_in">dpmi</span>(a, n);</span><br><span class="line">    t1[<span class="number">1</span>] = <span class="built_in">dpmx</span>(a, n);</span><br><span class="line">    t2[<span class="number">0</span>] = <span class="built_in">dpmi</span>(b, m);</span><br><span class="line">    t2[<span class="number">1</span>] = <span class="built_in">dpmx</span>(b, m);</span><br><span class="line">    ll ans = <span class="number">-1e18</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">1</span>; j++)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, t1[i] * t2[j]);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="J"><a href="#J" class="headerlink" title="J"></a>J</h1><p>dp做法:</p>
<p>记$f_{u,i}$为以u为根的子树,权值和%3为i,的方案(选的是1&#x2F;2)</p>
<p>暴力转移即可</p>
<p>如何求方案?</p>
<p>对于每个节点u,用一个pre数组记录子树和为i的方案(类似背包求方案)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls(x) (a[x].l)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs(x) (a[x].r)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sum(x) a[x].sum</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">100</span>, M = <span class="number">25</span>;</span><br><span class="line">random_device rd;</span><br><span class="line"><span class="function">mt19937_64 <span class="title">gen</span><span class="params">(rd())</span></span>;</span><br><span class="line">ll t1[<span class="number">2</span>], t2[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">char</span>&gt; <span class="title">c</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">e</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; c[i];</span><br><span class="line">    vector&lt;vector&lt;ll&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;ll&gt;(<span class="number">3</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        e[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> dfs, <span class="type">int</span> u) -&gt; <span class="type">void</span></span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;ll&gt; <span class="built_in">f1</span>(<span class="number">3</span>, <span class="number">0</span>), <span class="built_in">f2</span>(<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">        f1[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> to : e[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(dfs, to);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">                f2[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span>; j++)</span><br><span class="line">                    <span class="keyword">if</span> (f1[i] &amp;&amp; f[to][j])</span><br><span class="line">                        f2[(i + j) % <span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">swap</span>(f1, f2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2</span>; j++)</span><br><span class="line">                <span class="keyword">if</span> (f1[i])</span><br><span class="line">                    f[u][(i + j) % <span class="number">3</span>] = j;</span><br><span class="line">        <span class="keyword">if</span> (c[u] == <span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">            f[u][<span class="number">1</span>] = f[u][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(dfs, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> cal = [&amp;](<span class="keyword">auto</span> cal, <span class="type">int</span> u, <span class="type">int</span> s) -&gt; <span class="type">void</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans[u] = f[u][s];</span><br><span class="line">        s = (s - f[u][s] + <span class="number">3</span>) % <span class="number">3</span>;</span><br><span class="line">        <span class="function">vector&lt;ll&gt; <span class="title">opt</span><span class="params">(e[u].size())</span></span>;</span><br><span class="line">        <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;ll&gt;&gt; <span class="built_in">pre</span>(e[u].<span class="built_in">size</span>(), <span class="built_in">vector</span>&lt;ll&gt;(<span class="number">3</span>, <span class="number">-1</span>));</span><br><span class="line">        <span class="function">vector&lt;ll&gt; <span class="title">f1</span><span class="params">(<span class="number">3</span>, <span class="number">0</span>)</span>, <span class="title">f2</span><span class="params">(<span class="number">3</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        f1[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> to : e[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">                f2[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span>; j++)</span><br><span class="line">                    <span class="keyword">if</span> (f1[i] &amp;&amp; f[to][j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        f2[(i + j) % <span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">                        pre[now][(i + j) % <span class="number">3</span>] = j;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">            now++;</span><br><span class="line">            <span class="built_in">swap</span>(f1, f2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = now - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            opt[i] = pre[i][s];</span><br><span class="line">            s = (s - opt[i] + <span class="number">3</span>) % <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> to : e[u])</span><br><span class="line">            <span class="built_in">cal</span>(cal, to, opt[now++]);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (c[<span class="number">1</span>] == <span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cal</span>(cal, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">                cout &lt;&lt; ans[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (f[<span class="number">1</span>][i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cal</span>(cal, <span class="number">1</span>, i);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">                    cout &lt;&lt; ans[i];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; setprecision(5);</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; _;</span></span><br><span class="line">    <span class="keyword">while</span> (_--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>贪心做法:</p>
<p>先暴力把所有白色节点设置为1</p>
<p>对于以u为根的子树,</p>
<p>如果该节点为红色,且此时权值和为0:</p>
<p>如果有白色子节点,就修改为2</p>
<p>没有说明无解</p>
<p>如果权值和不为0,则可以根据权值和设置u的值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">e</span>(n + <span class="number">1</span>);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; rev_dfn, <span class="built_in">ans</span>(n + <span class="number">1</span>, <span class="number">0</span>), <span class="built_in">s</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">w</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">char</span>&gt; <span class="title">c</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        e[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (c[i] == <span class="string">&#x27;W&#x27;</span>)</span><br><span class="line">            w[x] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (c[i] == <span class="string">&#x27;R&#x27;</span> &amp;&amp; !w[i])</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> dfs, <span class="type">int</span> u, <span class="type">int</span> fa) -&gt; <span class="type">void</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> to : e[u])</span><br><span class="line">            <span class="keyword">if</span> (to != fa)</span><br><span class="line">                <span class="built_in">dfs</span>(dfs, to, u);</span><br><span class="line">        rev_dfn.<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(dfs, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> u : rev_dfn)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> to : e[u])</span><br><span class="line">            s[u] += s[to];</span><br><span class="line">        <span class="keyword">if</span> (c[u] == <span class="string">&#x27;W&#x27;</span>)</span><br><span class="line">            ans[u] = <span class="number">1</span>, s[u]++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[u] % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[u] = <span class="number">2</span>, s[u] += <span class="number">3</span>;</span><br><span class="line">                ans[w[u]] = <span class="number">2</span>, s[w[u]]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[u] % <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line">                ans[u] = <span class="number">2</span>, s[u] += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans[u] = <span class="number">1</span>, s[u]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="K"><a href="#K" class="headerlink" title="K"></a>K</h1><p>考虑1*m的情况,暴力打表发现只有derder..</p>
<p>拓展到n*m,发现只有每行向左&#x2F;右偏移一位</p>
<p>所有一共有$A(3,3)*2$种情况,计算每种情况需要修改的次数,查询时用二维前缀和优化</p>
<p>注意2*2还有类似一下情况</p>
<p>re</p>
<p>er</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;string&gt; list_s = &#123;<span class="string">&quot;red&quot;</span>, <span class="string">&quot;edr&quot;</span>, <span class="string">&quot;dre&quot;</span>, <span class="string">&quot;der&quot;</span>, <span class="string">&quot;erd&quot;</span>, <span class="string">&quot;rde&quot;</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; <span class="built_in">a</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;(m + <span class="number">1</span>, <span class="string">&#x27;#&#x27;</span>));</span><br><span class="line">    vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; v;</span><br><span class="line">    string s = <span class="string">&quot;der&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> cal = [&amp;](<span class="type">int</span> d) -&gt; vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">c</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, st = p; j &lt;= m; j++, st = (st + <span class="number">1</span>) % <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j] + c[i][j - <span class="number">1</span>] - c[i - <span class="number">1</span>][j - <span class="number">1</span>] + (a[i][j] != s[st]);</span><br><span class="line">            &#125;</span><br><span class="line">            p = (p + d + <span class="number">3</span>) % <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;;</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="built_in">cal</span>(<span class="number">1</span>)), v.<span class="built_in">push_back</span>(<span class="built_in">cal</span>(<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>()))</span><br><span class="line">        v.<span class="built_in">push_back</span>(<span class="built_in">cal</span>(<span class="number">1</span>)), v.<span class="built_in">push_back</span>(<span class="built_in">cal</span>(<span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> cal = [&amp;](<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;s) -&gt; <span class="type">int</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : v)</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, <span class="built_in">cal</span>(x1, y1, x2, y2, c));</span><br><span class="line">        <span class="keyword">if</span> (x2 - x1 + <span class="number">1</span> == <span class="number">2</span> &amp;&amp; y2 - y1 + <span class="number">1</span> == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;s : list_s)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">char</span> c1 = s[<span class="number">0</span>], c2 = s[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">                now += (a[x1][y1] != c1);</span><br><span class="line">                now += (a[x1][y2] != c2);</span><br><span class="line">                now += (a[x2][y1] != c2);</span><br><span class="line">                now += (a[x2][y2] != c1);</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, now);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>nowcoderA</category>
      </categories>
  </entry>
  <entry>
    <title>AtCoder Beginner Contest 341</title>
    <url>/2024/03/01/AtCoder%20Beginner%20Contest%20341/</url>
    <content><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;10&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span>, <span class="title">t</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span>, <span class="title">s</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; s[i] &gt;&gt; t[i];</span><br><span class="line">        ll add = a[i] / s[i];</span><br><span class="line">        a[i + <span class="number">1</span>] += add * t[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a[n] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>暴力检查每个点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, k, ans = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; <span class="built_in">a</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;(m + <span class="number">1</span>));</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">    <span class="keyword">auto</span> chk = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) -&gt; <span class="type">bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">                y--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">                y++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&#x27;U&#x27;</span>)</span><br><span class="line">                x--;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x++;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m || a[x][y] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                ans += <span class="built_in">chk</span>(i, j);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>二分答案,check时容斥一下即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, m, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    ll l = <span class="number">1</span>, r = <span class="number">2e18</span>, g = n / __gcd(n, m) * m;</span><br><span class="line">    <span class="keyword">auto</span> check = [&amp;](ll x) -&gt; <span class="type">bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        ll num = x / n + x / m - <span class="number">2</span> * (x / g);</span><br><span class="line">        <span class="keyword">return</span> num &gt;= k;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        ll mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">            r = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><p>发现每次反转对答案的影响只有$l-,l$和$r,r+1$,用树状数组维护答案,线段树维护原数组</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    ll t, val, sz;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;node&gt; a;</span><br><span class="line">    <span class="built_in">segtree</span>(<span class="type">int</span> _n) : <span class="built_in">n</span>(_n * <span class="number">4</span> + <span class="number">10</span>), <span class="built_in">a</span>(n + <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123; a[id].val = (a[id * <span class="number">2</span>].val + a[id * <span class="number">2</span> + <span class="number">1</span>].val) % <span class="number">2</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">settag</span><span class="params">(<span class="type">int</span> id, ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a[id].val = (a[id].val + t * (a[id].sz)) % <span class="number">2</span>;</span><br><span class="line">        a[id].t = (a[id].t + t) % <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[id].t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">settag</span>(id * <span class="number">2</span>, a[id].t);</span><br><span class="line">            <span class="built_in">settag</span>(id * <span class="number">2</span> + <span class="number">1</span>, a[id].t);</span><br><span class="line">            a[id].t = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, vector&lt;<span class="type">int</span>&gt; &amp;arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a[id].t = <span class="number">0</span>;</span><br><span class="line">        a[id].sz = r - l + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            a[id].val = arr[l];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(id * <span class="number">2</span>, l, mid, arr);</span><br><span class="line">            <span class="built_in">build</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, arr);</span><br><span class="line">            <span class="built_in">update</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr, ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == ql &amp;&amp; r == qr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">settag</span>(id, t);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">            <span class="built_in">modify</span>(id * <span class="number">2</span>, l, mid, ql, qr, t);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">            <span class="built_in">modify</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, t);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">modify</span>(id * <span class="number">2</span>, l, mid, ql, mid, t);</span><br><span class="line">            <span class="built_in">modify</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr, t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">update</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == ql &amp;&amp; r == qr)</span><br><span class="line">            <span class="keyword">return</span> a[id].val;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">pushdown</span>(id);</span><br><span class="line">        <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(id * <span class="number">2</span>, l, mid, ql, qr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">return</span> (<span class="built_in">query</span>(id * <span class="number">2</span>, l, mid, ql, mid) + <span class="built_in">query</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr)) % <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;ll&gt; a;</span><br><span class="line">    <span class="built_in">BIT</span>(<span class="type">int</span> _n) : <span class="built_in">n</span>(_n), <span class="built_in">a</span>(n + <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lb</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> n, vector&lt;<span class="type">int</span>&gt; &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] += s[i];</span><br><span class="line">            <span class="type">int</span> fa = i + <span class="built_in">lb</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (fa &lt;= n)</span><br><span class="line">                a[fa] += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, ll y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; x &lt;= n; x += <span class="built_in">lb</span>(x))</span><br><span class="line">            a[x] += y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x; x ^= <span class="built_in">lb</span>(x))</span><br><span class="line">            res += a[x];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(ll s)</span> <span class="comment">// 第一个小于等于s的位置</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">20</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            <span class="keyword">if</span> (pos + (<span class="number">1</span> &lt;&lt; j) &lt;= n &amp;&amp; a[pos + (<span class="number">1</span> &lt;&lt; j)] &lt;= s)</span><br><span class="line">            &#123;</span><br><span class="line">                pos += (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">                s -= a[pos];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q &gt;&gt; s;</span><br><span class="line">    s = <span class="string">&#x27;#&#x27;</span> + s;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="function">BIT <span class="title">bit</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="function">segtree <span class="title">seg</span><span class="params">(n)</span></span>;</span><br><span class="line">    seg.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n, a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i] == a[i - <span class="number">1</span>])</span><br><span class="line">            bit.<span class="built_in">add</span>(i - <span class="number">1</span>, <span class="number">1</span>), bit.<span class="built_in">add</span>(i, <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> opt, l, r;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; opt &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            seg.<span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (l &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> fi = seg.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, l - <span class="number">1</span>, l - <span class="number">1</span>);</span><br><span class="line">                <span class="type">int</span> se = seg.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, l);</span><br><span class="line">                <span class="keyword">if</span> (fi != se)</span><br><span class="line">                    bit.<span class="built_in">add</span>(l - <span class="number">1</span>, <span class="number">-1</span>), bit.<span class="built_in">add</span>(l, <span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    bit.<span class="built_in">add</span>(l - <span class="number">1</span>, <span class="number">1</span>), bit.<span class="built_in">add</span>(l, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r &lt; n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> fi = seg.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, r, r);</span><br><span class="line">                <span class="type">int</span> se = seg.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, r + <span class="number">1</span>, r + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (fi != se)</span><br><span class="line">                    bit.<span class="built_in">add</span>(r, <span class="number">-1</span>), bit.<span class="built_in">add</span>(r + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    bit.<span class="built_in">add</span>(r, <span class="number">1</span>), bit.<span class="built_in">add</span>(r + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> chk = bit.<span class="built_in">query</span>(r - <span class="number">1</span>) - bit.<span class="built_in">query</span>(l);</span><br><span class="line">                cout &lt;&lt; (chk ? <span class="string">&quot;No&quot;</span> : <span class="string">&quot;Yes&quot;</span>) &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (l == r)</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; (seg.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, l) != seg.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, r, r) ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>) &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><p>发现点只会从w大的到w小的,这样原图就变成了一个DAG,在这个图上对每个点跑一边01背包即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">e</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">v</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">d</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span>, <span class="title">dp</span><span class="params">(N, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;pii&gt; <span class="title">edge</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[u, v] : edge)</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; v[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> [x, y] : edge)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[x] &gt; v[y])</span><br><span class="line">            e[x].<span class="built_in">push_back</span>(y), d[y]++;</span><br><span class="line">        <span class="keyword">if</span> (v[x] &lt; v[y])</span><br><span class="line">            e[y].<span class="built_in">push_back</span>(x), d[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ord;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!d[i])</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        ord.<span class="built_in">push_back</span>(t);</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> to : e[t])</span><br><span class="line">            <span class="keyword">if</span> (--d[to] == <span class="number">0</span>)</span><br><span class="line">                q.<span class="built_in">push</span>(to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(ord.<span class="built_in">begin</span>(), ord.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> u : ord)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= v[u]; i++)</span><br><span class="line">            dp[i] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> to : e[u])</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = v[u] - <span class="number">1</span>; i &gt;= v[to]; i--)</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[i - v[to]] + f[to]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v[u]; i++)</span><br><span class="line">            f[u] = <span class="built_in">max</span>(f[u], dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        ans += f[i] * a[i];</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><p>设s为a的前缀和,那么有:</p>
<p>$ ave&#x3D;\frac{s[r]-s[k]}{r-k+1} $</p>
<p>发现这个式子的数学含义表示斜率,也就是说,要求出一个r,使得斜率最大</p>
<p>将数组反转,题目转化为:</p>
<p>$ ave&#x3D;\frac{s[k]-s[r]}{k-r+1} $</p>
<p>用单调栈维护每个位置</p>
<p>只要当前i与q[r]的斜率小于等于i与q[r-1]的斜率,那么就可以删除r(上凸壳)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span>, <span class="title">s</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">q</span><span class="params">(n + <span class="number">10</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">-1</span>;</span><br><span class="line">    q[++r] = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">double</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (r &gt; <span class="number">0</span> &amp;&amp; (s[i] - s[q[r]]) * (q[r] - q[r - <span class="number">1</span>]) &lt;= (s[q[r]] - s[q[r - <span class="number">1</span>]]) * (i - q[r]))</span><br><span class="line">            r--;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(<span class="number">1.0</span> * (s[i] - s[q[r]]) / (i - q[r]));</span><br><span class="line">        q[++r] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans)</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
  </entry>
  <entry>
    <title>Codeforces Round 929 (Div. 3)</title>
    <url>/2024/03/01/Codeforces%20Round%20929%20(Div.%203)/</url>
    <content><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, sum = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        sum += <span class="built_in">abs</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>分类讨论</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, sum = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">cnt</span><span class="params">(<span class="number">10</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        a[i] %= <span class="number">3</span>;</span><br><span class="line">        cnt[a[i]]++;</span><br><span class="line">        sum = (sum + a[i]) % <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum == <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sum == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; (cnt[<span class="number">1</span>] ? <span class="number">1</span> : <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>暴力枚举</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll a, b, l;</span><br><span class="line">    set&lt;ll&gt; s;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; l;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= l; i *= a)</span><br><span class="line">        <span class="keyword">for</span> (ll j = <span class="number">1</span>; i * j &lt;= l; j *= b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (l % (i * j) == <span class="number">0</span>)</span><br><span class="line">                s.<span class="built_in">insert</span>(l / (i * j));</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>首先考虑如何构造一个可能的方案</p>
<p>按照升序排序</p>
<p>如果最小值只有1个,类似2 3,这样是可以的</p>
<p>但是这样会这种情况 2 2 3,但可行解是3 2 2</p>
<p>注意到只需要找到一个最小值不能整除的数,那么就一定可以</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, mi = <span class="number">1e9</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i], mp[a[i]]++, mi = <span class="built_in">min</span>(mi, a[i]);</span><br><span class="line">    <span class="keyword">if</span> (mp[mi] == <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (a[i] % mi)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><p>先二分出最小的r满足$sum[r]-sum[l-1]&lt;&#x3D;u$</p>
<p>然后在暴力枚举边界,因为是平方级别的增长,所以大概只需要再跑个200次</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">s</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, u;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; u;</span><br><span class="line">        <span class="type">int</span> lo = l, ri = n;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt; ri)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = (lo + ri + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[mid] - s[l - <span class="number">1</span>] &lt;= u)</span><br><span class="line">                lo = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ri = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> cal = [&amp;](<span class="type">int</span> x) -&gt; ll</span><br><span class="line">        &#123;</span><br><span class="line">            ll sum = s[x] - s[l - <span class="number">1</span>];</span><br><span class="line">            ll res = (sum * (u - sum + <span class="number">1</span> + u)) / <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        ll ans = ri, mx = <span class="built_in">cal</span>(ri);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = ri, cnt = <span class="number">200</span>; j &lt;= n &amp;&amp; cnt; j++, cnt--)</span><br><span class="line">        &#123;</span><br><span class="line">            ll res = <span class="built_in">cal</span>(j);</span><br><span class="line">            <span class="keyword">if</span> (res &gt; mx)</span><br><span class="line">                mx = res, ans = j;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><p>注意到往上走是无效的(在i!&#x3D;m-1)</p>
<p>然后bfs,在最后一列枚举所有可能的答案</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, <span class="number">0</span>));</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dist</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, <span class="number">1e9</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">    queue&lt;pii&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    dist[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> [x, y] = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> t = dist[x][y];</span><br><span class="line">        <span class="keyword">if</span> (!a[(x + <span class="number">1</span> + t) % n][y] &amp;&amp; !a[(x + <span class="number">2</span> + t) % n][y] &amp;&amp; dist[(x + <span class="number">1</span>) % n][y] == <span class="number">1e9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dist[(x + <span class="number">1</span>) % n][y] = t + <span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;(x + <span class="number">1</span>) % n, y&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y + <span class="number">1</span> &lt; m &amp;&amp; !a[(x + <span class="number">1</span> + t) % n][y + <span class="number">1</span>] &amp;&amp; dist[x][y + <span class="number">1</span>] == <span class="number">1e9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dist[x][y + <span class="number">1</span>] = t + <span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;x, y + <span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (dist[i][m - <span class="number">1</span>] != <span class="number">1e9</span>)</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, dist[i][m - <span class="number">1</span>] + <span class="built_in">min</span>(i + <span class="number">1</span>, n - i - <span class="number">1</span>));</span><br><span class="line">    cout &lt;&lt; ((ans == <span class="number">1e9</span>) ? <span class="number">-1</span> : ans) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><p>打表发现最多只有8种合法情况,每次加入时判断一下即可</p>
<p>0 0 1 1 0<br>1 1 0 0 1<br>0 0 1 1 0<br>1 1 0 0 1<br>0 0 1 1 0 </p>
<p>0 1 1 0 0<br>1 0 0 1 1<br>0 1 1 0 0<br>1 0 0 1 1<br>0 1 1 0 0 </p>
<p>1 0 0 1 1<br>0 1 1 0 0<br>1 0 0 1 1<br>0 1 1 0 0<br>1 0 0 1 1 </p>
<p>1 1 0 0 1<br>0 0 1 1 0<br>1 1 0 0 1<br>0 0 1 1 0<br>1 1 0 0 1 </p>
<p>0 1 0 1 0<br>0 1 0 1 0<br>1 0 1 0 1<br>1 0 1 0 1<br>0 1 0 1 0 </p>
<p>0 1 0 1 0<br>1 0 1 0 1<br>1 0 1 0 1<br>0 1 0 1 0<br>0 1 0 1 0 </p>
<p>1 0 1 0 1<br>0 1 0 1 0<br>0 1 0 1 0<br>1 0 1 0 1<br>1 0 1 0 1 </p>
<p>1 0 1 0 1<br>1 0 1 0 1<br>0 1 0 1 0<br>0 1 0 1 0<br>1 0 1 0 1 </p>
<p>打表代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) -&gt; <span class="type">bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x + <span class="number">2</span> &lt; n &amp;&amp; y + <span class="number">2</span> &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">                <span class="keyword">if</span> (a[x + i][y + i] == a[x][y])</span><br><span class="line">                    cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x + <span class="number">2</span> &lt; n &amp;&amp; y - <span class="number">2</span> &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">                <span class="keyword">if</span> (a[x + i][y - i] == a[x][y])</span><br><span class="line">                    cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x + <span class="number">2</span> &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">                <span class="keyword">if</span> (a[x + i][y] == a[x][y])</span><br><span class="line">                    cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y + <span class="number">2</span> &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">                <span class="keyword">if</span> (a[x][y + i] == a[x][y])</span><br><span class="line">                    cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> dfs, <span class="type">int</span> u) -&gt; <span class="type">void</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (u == n * n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">check</span>(i, j))</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                    cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> x = u / n, y = u % n;</span><br><span class="line">        a[x][y] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(dfs, u + <span class="number">1</span>);</span><br><span class="line">        a[x][y] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(dfs, u + <span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(dfs, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(<span class="number">8</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(<span class="number">4</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="number">8</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y, now;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; s;</span><br><span class="line">        now = s[<span class="number">0</span>] == <span class="string">&#x27;s&#x27;</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v1 = (j &gt;&gt; <span class="number">0</span>) &amp; <span class="number">1</span>;</span><br><span class="line">            r[<span class="number">0</span>] = (j &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>;</span><br><span class="line">            r[<span class="number">1</span>] = (j &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (r[<span class="number">0</span>] == r[<span class="number">1</span>])</span><br><span class="line">                r[<span class="number">2</span>] = r[<span class="number">3</span>] = <span class="number">1</span> - r[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r[<span class="number">3</span>] = r[<span class="number">0</span>], r[<span class="number">2</span>] = r[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> tar = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (v1)</span><br><span class="line">            &#123;</span><br><span class="line">                tar = r[y % <span class="number">4</span>];</span><br><span class="line">                <span class="keyword">if</span> (x % <span class="number">2</span>)</span><br><span class="line">                    tar = <span class="number">1</span> - tar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tar = r[x % <span class="number">4</span>];</span><br><span class="line">                <span class="keyword">if</span> (y % <span class="number">2</span>)</span><br><span class="line">                    tar = <span class="number">1</span> - tar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (now != tar)</span><br><span class="line">                ans[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">count</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>(), <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
  </entry>
  <entry>
    <title>AtCoder Beginner Contest 339</title>
    <url>/2024/03/01/AtCoder%20Beginner%20Contest%20339/</url>
    <content><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><p>模拟即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; s.<span class="built_in">substr</span>(i + <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>模拟，可以让下标从0开始，这样可以在%n下满足题意</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, opt;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; opt;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; <span class="built_in">a</span>(n, <span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;(m, <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">    <span class="type">int</span> d = <span class="number">0</span>, x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (opt--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[x][y] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[x][y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">            d = (d + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            a[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            d = (d - <span class="number">1</span> + <span class="number">4</span>) % <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        x = (x + dx[d] + n) % n;</span><br><span class="line">        y = (y + dy[d] + m) % m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            cout &lt;&lt; a[i][j];</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>从后往前吗模拟：<br>设当前最少有x人<br>如果是$a[i]&lt;0$，则在到达该站前至少$abs(a[i])$人<br>如果是$a[i]&gt;0$，则在到达该站前可以少$abs(a[i])$人<br>最后再顺着模拟一遍得到答案</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans -= a[i];</span><br><span class="line">            ans = <span class="built_in">max</span>(<span class="number">0ll</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans -= a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        ans += a[i];</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>同时维护两人的坐标，进行bfs</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ll dist[<span class="number">70</span>][<span class="number">70</span>][<span class="number">70</span>][<span class="number">70</span>];</span><br><span class="line"><span class="type">int</span> d[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, cnt = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    array&lt;<span class="type">int</span>, 4&gt; st;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; <span class="built_in">a</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">                st[cnt++] = i, st[cnt++] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= n; l++)</span><br><span class="line">                    dist[i][j][k][l] = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> bfs = [&amp;](array&lt;<span class="type">int</span>, <span class="number">4</span>&gt; x) -&gt; <span class="type">void</span></span><br><span class="line">    &#123;</span><br><span class="line">        queue&lt;array&lt;<span class="type">int</span>, <span class="number">4</span>&gt;&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(x);</span><br><span class="line">        dist[x[<span class="number">0</span>]][x[<span class="number">1</span>]][x[<span class="number">2</span>]][x[<span class="number">3</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) <span class="comment">// 方向</span></span><br><span class="line">            &#123;</span><br><span class="line">                array&lt;<span class="type">int</span>, 4&gt; tmp;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    tmp[j] = t[j] + d[j][i];</span><br><span class="line">                    tmp[j] = <span class="built_in">min</span>(n, tmp[j]);</span><br><span class="line">                    tmp[j] = <span class="built_in">max</span>(<span class="number">1</span>, tmp[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (a[tmp[<span class="number">0</span>]][tmp[<span class="number">1</span>]] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                    tmp[<span class="number">0</span>] = t[<span class="number">0</span>], tmp[<span class="number">1</span>] = t[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (a[tmp[<span class="number">2</span>]][tmp[<span class="number">3</span>]] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">                    tmp[<span class="number">2</span>] = t[<span class="number">2</span>], tmp[<span class="number">3</span>] = t[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (dist[tmp[<span class="number">0</span>]][tmp[<span class="number">1</span>]][tmp[<span class="number">2</span>]][tmp[<span class="number">3</span>]] &gt; dist[t[<span class="number">0</span>]][t[<span class="number">1</span>]][t[<span class="number">2</span>]][t[<span class="number">3</span>]] + <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dist[tmp[<span class="number">0</span>]][tmp[<span class="number">1</span>]][tmp[<span class="number">2</span>]][tmp[<span class="number">3</span>]] = dist[t[<span class="number">0</span>]][t[<span class="number">1</span>]][t[<span class="number">2</span>]][t[<span class="number">3</span>]] + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">bfs</span>(st);</span><br><span class="line">    ll ans = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, dist[i][j][i][j]);</span><br><span class="line">    <span class="keyword">if</span> (ans == <span class="number">1e9</span>)</span><br><span class="line">        ans = <span class="number">-1</span>;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><p>线段树优化dp,维护转移范围内的最大值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    ll val;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;node&gt; a;</span><br><span class="line">    <span class="built_in">segtree</span>(<span class="type">int</span> _n) : <span class="built_in">n</span>(_n * <span class="number">4</span> + <span class="number">10</span>), <span class="built_in">a</span>(n + <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123; a[id].val = <span class="built_in">max</span>(a[id * <span class="number">2</span>].val, a[id * <span class="number">2</span> + <span class="number">1</span>].val); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, vector&lt;<span class="type">int</span>&gt; &amp;arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            a[id].val = arr[l];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(id * <span class="number">2</span>, l, mid, arr);</span><br><span class="line">            <span class="built_in">build</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, arr);</span><br><span class="line">            <span class="built_in">update</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="comment">// 叶子节点</span></span><br><span class="line">            a[id].val = val;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (pos &lt;= mid)</span><br><span class="line">                <span class="built_in">change</span>(id * <span class="number">2</span>, l, mid, pos, val);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">change</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, pos, val);</span><br><span class="line">            <span class="built_in">update</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == ql &amp;&amp; r == qr)</span><br><span class="line">            <span class="keyword">return</span> a[id].val;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(id * <span class="number">2</span>, l, mid, ql, qr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">query</span>(id * <span class="number">2</span>, l, mid, ql, mid), <span class="built_in">query</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, d;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; d;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">rec</span><span class="params">(N, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="function">segtree <span class="title">seg</span><span class="params">(N)</span></span>;</span><br><span class="line">    seg.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n, rec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">max</span>(<span class="number">1</span>, a[i] - d), r = <span class="built_in">min</span>((<span class="type">int</span>)<span class="number">5e5</span>, a[i] + d);</span><br><span class="line">        <span class="type">int</span> res = seg.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, N, l, r) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> now = <span class="built_in">max</span>(seg.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, N, a[i], a[i]), <span class="number">1ll</span>);</span><br><span class="line">        now = <span class="built_in">max</span>(now, res);</span><br><span class="line">        seg.<span class="built_in">change</span>(<span class="number">1</span>, <span class="number">1</span>, N, a[i], now);</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        res = <span class="built_in">max</span>(res, seg.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, N, a[i], a[i]));</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><p>如果模数够大，够多，那么就可以保证$a<em>b&#x3D;c$与$a%mod</em>b%mod&#x3D;c%mod$等效<br>可以双哈希，三哈希，或者模数开到ll<br>正经比赛的话，建议还是双哈希（</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    map&lt;ll, ll&gt; mp;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> cal = [&amp;](string s) -&gt; ll</span><br><span class="line">    &#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">            res = (res * <span class="number">10</span> + (s[i] - <span class="string">&#x27;0&#x27;</span>)) % mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        a[i] = <span class="built_in">cal</span>(s);</span><br><span class="line">        mp[a[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ll tmp = <span class="type">__int128_t</span>(a[i]) * a[j] % mod;</span><br><span class="line">            ans += mp[tmp];</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><p>主席树模板题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls(x) (a[x].l)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs(x) (a[x].r)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sum(x) a[x].sum</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">7e7</span> + <span class="number">10</span>, M = <span class="number">25</span>;</span><br><span class="line">random_device rd;</span><br><span class="line"><span class="function">mt19937_64 <span class="title">gen</span><span class="params">(rd())</span></span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    ll sum, l, r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;node&gt; a;</span><br><span class="line">    <span class="built_in">segtree</span>(<span class="type">int</span> _n) : <span class="built_in">n</span>(<span class="number">1</span>) &#123; a.<span class="built_in">reserve</span>(_n); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">sum</span>(id) = <span class="built_in">sum</span>(<span class="built_in">ls</span>(id)) + <span class="built_in">sum</span>(<span class="built_in">rs</span>(id));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="built_in">sum</span>(id) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ls</span>(id) = ++n, <span class="built_in">rs</span>(id) = ++n;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="built_in">ls</span>(id), l, mid);</span><br><span class="line">            <span class="built_in">build</span>(<span class="built_in">rs</span>(id), mid + <span class="number">1</span>, r);</span><br><span class="line">            <span class="built_in">update</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> id, <span class="type">int</span> nxt, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sum</span>(nxt) = <span class="built_in">sum</span>(id) + val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">ls</span>(nxt) = <span class="built_in">ls</span>(id), <span class="built_in">rs</span>(nxt) = <span class="built_in">rs</span>(id);</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid)</span><br><span class="line">            <span class="built_in">ls</span>(nxt) = ++n, <span class="built_in">change</span>(pos, l, mid, <span class="built_in">ls</span>(id), <span class="built_in">ls</span>(nxt), val);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">rs</span>(nxt) = ++n, <span class="built_in">change</span>(pos, mid + <span class="number">1</span>, r, <span class="built_in">rs</span>(id), <span class="built_in">rs</span>(nxt), val);</span><br><span class="line">        <span class="built_in">update</span>(nxt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> <span class="comment">// 查询某个版本的区间和</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == ql &amp;&amp; r == qr)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sum</span>(id);</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(<span class="built_in">ls</span>(id), l, mid, ql, qr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(<span class="built_in">rs</span>(id), mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(<span class="built_in">ls</span>(id), l, mid, ql, mid) + <span class="built_in">query</span>(<span class="built_in">rs</span>(id), mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> nxt, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> <span class="comment">// 在id-nxt版本之间查询值域在ql-qr的和</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ql &gt; qr)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == ql &amp;&amp; r == qr)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sum</span>(nxt) - <span class="built_in">sum</span>(id);</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(<span class="built_in">ls</span>(id), <span class="built_in">ls</span>(nxt), l, mid, ql, qr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(<span class="built_in">rs</span>(id), <span class="built_in">rs</span>(nxt), mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(<span class="built_in">ls</span>(id), <span class="built_in">ls</span>(nxt), l, mid, ql, mid) + <span class="built_in">query</span>(<span class="built_in">rs</span>(id), <span class="built_in">rs</span>(nxt), mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, q, mx = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, b</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i], b.<span class="built_in">push_back</span>(a[i]), mx = <span class="built_in">max</span>(mx, a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">    b.<span class="built_in">erase</span>(<span class="built_in">unique</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>()), b.<span class="built_in">end</span>());</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">root</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    ll pre = <span class="number">0</span>;</span><br><span class="line">    root[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="function">segtree <span class="title">seg</span><span class="params">(<span class="number">2e7</span>)</span></span>;</span><br><span class="line">    seg.<span class="built_in">build</span>(root[<span class="number">0</span>], <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        root[i] = ++seg.n;</span><br><span class="line">        <span class="type">int</span> pos = (<span class="built_in">lower_bound</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), a[i]) - b.<span class="built_in">begin</span>()) + <span class="number">1</span>;</span><br><span class="line">        seg.<span class="built_in">change</span>(pos, <span class="number">1</span>, n, root[i - <span class="number">1</span>], root[i], a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll l, r, val;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; val;</span><br><span class="line">        l ^= pre, r ^= pre, val ^= pre;</span><br><span class="line">        <span class="type">int</span> pos = (<span class="built_in">upper_bound</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), val) - b.<span class="built_in">begin</span>());</span><br><span class="line">        pre = seg.<span class="built_in">query</span>(root[l - <span class="number">1</span>], root[r], <span class="number">1</span>, n, <span class="number">1</span>, pos);</span><br><span class="line">        cout &lt;&lt; pre &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; setprecision(5);</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; _;</span></span><br><span class="line">    <span class="keyword">while</span> (_--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
  </entry>
  <entry>
    <title>Codeforces Round 930 (Div. 2)</title>
    <url>/2024/03/01/Codeforces%20Round%20930%20(Div.%202)/</url>
    <content><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><p>答案就是$\le n$的最大的2的x次方</p>
<p>因为在所有操作中,1只会被2的x次方数改变位置</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">40</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">1ll</span> &lt;&lt; i) &lt;= n)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; (<span class="number">1ll</span> &lt;&lt; i) &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>贪心的考虑答案</p>
<p>如果往右和往下走是一样的,就继续往右走</p>
<p>如果往左是0,往下是1,贪心往右</p>
<p>如果往左是1,往下是0,贪心往下</p>
<p>怎样计算路径数?</p>
<p>找到拐点,往左走,如果往右和往下是一样的,答案++,否则break</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; <span class="built_in">a</span>(<span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">    vector&lt;<span class="type">char</span>&gt; ans;</span><br><span class="line">    ans.<span class="built_in">push_back</span>(a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; n &amp;&amp; a[<span class="number">0</span>][i + <span class="number">1</span>] == a[<span class="number">1</span>][i])</span><br><span class="line">            ans.<span class="built_in">push_back</span>(a[<span class="number">0</span>][i + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; n &amp;&amp; a[<span class="number">0</span>][i + <span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                ans.<span class="built_in">push_back</span>(a[<span class="number">0</span>][i + <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                c = i;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n; j++)</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(a[<span class="number">1</span>][j]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans)</span><br><span class="line">        cout &lt;&lt; i;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = c - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>][i + <span class="number">1</span>] == a[<span class="number">1</span>][i])</span><br><span class="line">        &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>打表可以发现,异或最大一定或最大,但或最大不一定异或最大,先找到最大值,花费n次,然后找到能够和最大值达到或最大的,如果相等,再取最小</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">char</span>&gt;&gt; <span class="built_in">a</span>(<span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">    vector&lt;<span class="type">char</span>&gt; ans;</span><br><span class="line">    ans.<span class="built_in">push_back</span>(a[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; n &amp;&amp; a[<span class="number">0</span>][i + <span class="number">1</span>] == a[<span class="number">1</span>][i])</span><br><span class="line">            ans.<span class="built_in">push_back</span>(a[<span class="number">0</span>][i + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; n &amp;&amp; a[<span class="number">0</span>][i + <span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                ans.<span class="built_in">push_back</span>(a[<span class="number">0</span>][i + <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                c = i;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n; j++)</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(a[<span class="number">1</span>][j]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : ans)</span><br><span class="line">        cout &lt;&lt; i;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = c - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>][i + <span class="number">1</span>] == a[<span class="number">1</span>][i])</span><br><span class="line">        &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>对于每个起点,先判断最终会从哪里出去,把从起点到终点的答案先加上</p>
<p>然后注意到,消去最近的两个折返点的答案为2<em>dis,把这个拆成2</em>(i-l)和2*(r-i)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">char</span>&gt; <span class="title">s</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">su</span><span class="params">(n + <span class="number">10</span>, <span class="number">0</span>)</span>, <span class="title">sd</span><span class="params">(n + <span class="number">10</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        su[i] = su[i - <span class="number">1</span>] + (s[i] == <span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        sd[i] = sd[i + <span class="number">1</span>] + (s[i] == <span class="string">&#x27;&lt;&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (su[i] &gt; sd[i + <span class="number">1</span>])</span><br><span class="line">            ans[i] = n - i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans[i] = i;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">q</span><span class="params">(<span class="number">2</span> * n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    ll h = <span class="number">0</span>, t = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tot += t - h;</span><br><span class="line">        <span class="keyword">while</span> (h &lt; t &amp;&amp; t - h &gt; sd[i])</span><br><span class="line">        &#123;</span><br><span class="line">            tot -= i - q[h];</span><br><span class="line">            h++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i] += <span class="number">2</span> * tot;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">            q[t++] = i;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    h = t = tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        tot += t - h;</span><br><span class="line">        <span class="keyword">while</span> (h &lt; t &amp;&amp; t - h &gt; su[i])</span><br><span class="line">        &#123;</span><br><span class="line">            tot -= q[h] - i;</span><br><span class="line">            h++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i] += <span class="number">2</span> * tot;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">            q[t++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
  </entry>
  <entry>
    <title>AtCoder Beginner Contest 340</title>
    <url>/2024/03/01/AtCoder%20Beginner%20Contest%20340/</url>
    <content><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><p>按照等差数列直接模拟即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, d;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a; i &lt;= b; i += d)</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>模拟</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> opt, x;</span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; opt &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">            a.<span class="built_in">push_back</span>(x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; a[a.<span class="built_in">size</span>() - x] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>如果直接模拟肯定会超时，考虑用set维护种类，map维护数量，这样可以保证每种数只会被操作一次</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    map&lt;ll, ll&gt; mp;</span><br><span class="line">    mp[n] = <span class="number">1</span>;</span><br><span class="line">    set&lt;ll&gt; s;</span><br><span class="line">    s.<span class="built_in">insert</span>(n);</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s.<span class="built_in">size</span>() &amp;&amp; *s.<span class="built_in">rbegin</span>() &gt;= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll t = *s.<span class="built_in">rbegin</span>();</span><br><span class="line">        ll num = mp[t];</span><br><span class="line">        s.<span class="built_in">erase</span>(*s.<span class="built_in">rbegin</span>());</span><br><span class="line">        res += t * num;</span><br><span class="line">        <span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">insert</span>(t / <span class="number">2</span>);</span><br><span class="line">            mp[t / <span class="number">2</span>] += num * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ll lo = t / <span class="number">2</span>, hi = (t - <span class="number">1</span>) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (lo &gt;= <span class="number">2</span>)</span><br><span class="line">                s.<span class="built_in">insert</span>(lo), mp[lo] += num;</span><br><span class="line">            <span class="keyword">if</span> (hi &gt;= <span class="number">2</span>)</span><br><span class="line">                s.<span class="built_in">insert</span>(hi), mp[hi] += num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>dijkstra板子</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;pll&gt;&gt; <span class="built_in">e</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, x;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; x;</span><br><span class="line">        e[i].<span class="built_in">push_back</span>(&#123;i + <span class="number">1</span>, a&#125;);</span><br><span class="line">        e[i].<span class="built_in">push_back</span>(&#123;x, b&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> dij = [&amp;](<span class="type">int</span> s) -&gt; ll</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;ll&gt; <span class="built_in">dist</span>(n + <span class="number">1</span>, <span class="number">1e18</span>);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">st</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        priority_queue&lt;pll, vector&lt;pll&gt;, greater&lt;pll&gt;&gt; q;</span><br><span class="line">        dist[s] = <span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, s&#125;);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> t = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (st[t.y])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            st[t.y] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> [to, w] : e[t.y])</span><br><span class="line">                <span class="keyword">if</span> (dist[t.y] + w &lt; dist[to])</span><br><span class="line">                    dist[to] = dist[t.y] + w, q.<span class="built_in">push</span>(&#123;dist[to], to&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dist[n];</span><br><span class="line">    &#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dij</span>(<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><p>模拟，用树状数组维护差分数组，就可以实现区间加，单点查询</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;ll&gt; a;</span><br><span class="line">    <span class="built_in">BIT</span>(<span class="type">int</span> _n) : <span class="built_in">n</span>(_n + <span class="number">3</span>), <span class="built_in">a</span>(n + <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lb</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> n, vector&lt;ll&gt; &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] += s[i];</span><br><span class="line">            <span class="type">int</span> fa = i + <span class="built_in">lb</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (fa &lt;= n)</span><br><span class="line">                a[fa] += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, ll y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; x &lt; n; x += <span class="built_in">lb</span>(x))</span><br><span class="line">            a[x] += y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x; x ^= <span class="built_in">lb</span>(x))</span><br><span class="line">            res += a[x];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">b</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">    <span class="function">BIT <span class="title">bit</span><span class="params">(n + <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        bit.<span class="built_in">add</span>(i, a[i]), bit.<span class="built_in">add</span>(i + <span class="number">1</span>, -a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = b[i] + <span class="number">1</span>;</span><br><span class="line">        ll num = bit.<span class="built_in">query</span>(u);</span><br><span class="line">        bit.<span class="built_in">add</span>(u, -num), bit.<span class="built_in">add</span>(u + <span class="number">1</span>, num);</span><br><span class="line">        ll add = num / n;</span><br><span class="line">        bit.<span class="built_in">add</span>(<span class="number">1</span>, add), bit.<span class="built_in">add</span>(n + <span class="number">1</span>, -add);</span><br><span class="line">        num %= n;</span><br><span class="line">        <span class="keyword">if</span> (u + num &lt;= n)</span><br><span class="line">            bit.<span class="built_in">add</span>(u + <span class="number">1</span>, <span class="number">1</span>), bit.<span class="built_in">add</span>(u + num + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            bit.<span class="built_in">add</span>(u + <span class="number">1</span>, <span class="number">1</span>), bit.<span class="built_in">add</span>(n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">            num -= n - u;</span><br><span class="line">            bit.<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">1</span>), bit.<span class="built_in">add</span>(num + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        cout &lt;&lt; bit.<span class="built_in">query</span>(j) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><p>考虑用向量来计算面积，类似22桂林的E题，设未知点为$(ax,ay)$,那么可以得到：<br>$ax<em>y-ay</em>x&#x3D;2$<br>用exgcd计算即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">```<span class="function">cpp</span></span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= (a / b) * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x, y;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    pll t = &#123;x, y&#125;;</span><br><span class="line">    ll ansx, ansy;</span><br><span class="line">    ll g = <span class="built_in">exgcd</span>(-t.y, t.x, ansx, ansy);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> % g)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ll mul = <span class="number">2</span> / g;</span><br><span class="line">        cout &lt;&lt; ansx * mul &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ansy * mul &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><p>1.虚树dp<br>存一下同种颜色的点,对每种颜色建虚树<br>在虚树上dp答案<br>dp[u]表示以u为根的树,所有叶子节点是同种颜色(设为k)的方案数<br>$dp_u&#x3D; {\textstyle \prod_{to \in son(i)} (f[to]+1)} $加一是因为可以不选<br>但是这样是不对的,因为如果当前点u的颜色与k不同:</p>
<p>1.它自己一个点肯定是不对的,要减去一(87,88行)<br>2.u和某一个儿子构成的树也是不对的,这样u成叶子了,要减去$f[to]$(90,91)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, tot = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">dfn</span><span class="params">(n + <span class="number">1</span>, <span class="number">1</span>)</span>, <span class="title">dist</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    vector&lt;vector&lt;ll&gt;&gt; <span class="built_in">to</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;ll&gt;(<span class="number">20</span>, <span class="number">0</span>));</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">e</span>(n + <span class="number">1</span>), <span class="built_in">col</span>(n + <span class="number">1</span>), <span class="built_in">ne</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i], col[a[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(v), e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> dfs, <span class="type">int</span> u, <span class="type">int</span> fa) -&gt; <span class="type">void</span></span><br><span class="line">    &#123;</span><br><span class="line">        dfn[u] = ++tot;</span><br><span class="line">        to[u][<span class="number">0</span>] = fa;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> to : e[u])</span><br><span class="line">            <span class="keyword">if</span> (to != fa)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[to] = dist[u] + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(dfs, to, u);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(dfs, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (to[i][j - <span class="number">1</span>])</span><br><span class="line">                to[i][j] = to[to[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">auto</span> lca = [&amp;](<span class="type">int</span> u, <span class="type">int</span> v) -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dist[u] &lt; dist[v])</span><br><span class="line">            <span class="built_in">swap</span>(u, v);</span><br><span class="line">        <span class="type">int</span> cha = dist[u] - dist[v];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span> &amp;&amp; cha; j++, cha /= <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> (cha &amp; <span class="number">1</span>)</span><br><span class="line">                u = to[u][j];</span><br><span class="line">        <span class="keyword">if</span> (u != v)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">19</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">                <span class="keyword">if</span> (to[u][j] != to[v][j])</span><br><span class="line">                    u = to[u][j], v = to[v][j];</span><br><span class="line">            <span class="keyword">return</span> to[u][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> build = [&amp;](<span class="type">int</span> i) -&gt; <span class="type">void</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(col[i].<span class="built_in">begin</span>(), col[i].<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">             &#123; <span class="keyword">return</span> dfn[a] &lt; dfn[b]; &#125;);</span><br><span class="line">        c.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j + <span class="number">1</span> &lt; col[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            c.<span class="built_in">push_back</span>(col[i][j]);</span><br><span class="line">            c.<span class="built_in">push_back</span>(<span class="built_in">lca</span>(col[i][j], col[i][j + <span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        c.<span class="built_in">push_back</span>(col[i].<span class="built_in">back</span>());</span><br><span class="line">        <span class="built_in">sort</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">             &#123; <span class="keyword">return</span> dfn[a] &lt; dfn[b]; &#125;);</span><br><span class="line">        c.<span class="built_in">erase</span>(<span class="built_in">unique</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>()), c.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; c.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ll lc = <span class="built_in">lca</span>(c[i], c[i + <span class="number">1</span>]);</span><br><span class="line">            ne[lc].<span class="built_in">push_back</span>(c[i + <span class="number">1</span>]);</span><br><span class="line">            ne[c[i + <span class="number">1</span>]].<span class="built_in">push_back</span>(lc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> dp = [&amp;](<span class="keyword">auto</span> dp, <span class="type">int</span> u, <span class="type">int</span> fa, <span class="type">int</span> k) -&gt; <span class="type">void</span></span><br><span class="line">    &#123;</span><br><span class="line">        f[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> to : ne[u])</span><br><span class="line">            <span class="keyword">if</span> (to != fa)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">dp</span>(dp, to, u, k);</span><br><span class="line">                f[u] = f[u] * (f[to] + <span class="number">1</span>) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        ll res = f[u];</span><br><span class="line">        <span class="keyword">if</span> (a[u] != k)</span><br><span class="line">        &#123;</span><br><span class="line">            res = (res - <span class="number">1</span> + mod) % mod;</span><br><span class="line">            f[u] = (f[u] - <span class="number">1</span> + mod) % mod;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> to : ne[u])</span><br><span class="line">                <span class="keyword">if</span> (to != fa)</span><br><span class="line">                    res = (res - f[to] + mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (ans + res) % mod;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (col[i].<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">build</span>(i);</span><br><span class="line">            <span class="built_in">dp</span>(dp, <span class="number">1</span>, <span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> t : c)</span><br><span class="line">                f[t] = <span class="number">0</span>, ne[t].<span class="built_in">clear</span>();</span><br><span class="line">            c.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.启发式合并</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">e</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(v), e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> dfs, <span class="type">int</span> u, <span class="type">int</span> fa) -&gt; map&lt;ll, ll&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        map&lt;ll, ll&gt; fmp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> to : e[u])</span><br><span class="line">            <span class="keyword">if</span> (to != fa)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> smp = <span class="built_in">dfs</span>(dfs, to, u);</span><br><span class="line">                ans = (ans + smp[a[u]]) % mod; <span class="comment">// u 与to 组成树</span></span><br><span class="line">                <span class="keyword">if</span> (fmp.<span class="built_in">size</span>() &lt; smp.<span class="built_in">size</span>())</span><br><span class="line">                    <span class="built_in">swap</span>(fmp, smp);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> [col, sz] : smp)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = (ans + fmp[col] * sz % mod) % mod;</span><br><span class="line">                    fmp[col] = ((fmp[col] + <span class="number">1</span>) * (sz + <span class="number">1</span>) % mod - <span class="number">1</span> + mod) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        fmp[a[u]] = (fmp[a[u]] + <span class="number">1</span>) % mod;</span><br><span class="line">        ans = (ans + <span class="number">1</span>) % mod; <span class="comment">// u自己作为树</span></span><br><span class="line">        <span class="keyword">return</span> fmp;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(dfs, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
  </entry>
  <entry>
    <title>AtCoder Beginner Contest 342</title>
    <url>/2024/03/01/AtCoder%20Beginner%20Contest%20342/</url>
    <content><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s, s1;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    s1 = s;</span><br><span class="line">    <span class="built_in">sort</span>(s1.<span class="built_in">begin</span>(), s1.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">char</span> ans;</span><br><span class="line">    <span class="keyword">if</span> (s1[<span class="number">0</span>] == s1[<span class="number">1</span>])</span><br><span class="line">        ans = s1.<span class="built_in">back</span>();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = s1[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="keyword">if</span> (s[i] == ans)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        mp[x] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        cout &lt;&lt; (mp[a] &gt; mp[b] ? b : a) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><p>暴力合并即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">        a[(s[i] - <span class="string">&#x27;a&#x27;</span>)].<span class="built_in">push_back</span>(i);</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        <span class="type">int</span> x = u - <span class="string">&#x27;a&#x27;</span>, y = v - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (x == y)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[x].<span class="built_in">empty</span>())</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[y].<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> e : a[x])</span><br><span class="line">                    a[y].<span class="built_in">push_back</span>(e);</span><br><span class="line">                a[x].<span class="built_in">clear</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">swap</span>(a[x], a[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">char</span>&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>, <span class="string">&#x27;#&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : a[i])</span><br><span class="line">            ans[p] = <span class="built_in">char</span>(<span class="string">&#x27;a&#x27;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><p>答案只有以下几种情况:</p>
<p>假设0既不是平方数,也不是非平凡数</p>
<p>1.平方数*平方数</p>
<p>2.非平方数*非平方数</p>
<p>3.0*非零</p>
<p>4.非零*0</p>
<p>1.3.4可以直接计数,接下来考虑怎么算2对答案的贡献</p>
<p>考虑平方数的性质,每个质因子的指数都是偶数,所以两个非平方数相乘也要满足</p>
<p>记录一下非平方数中指数是奇数的数的乘积,这个乘积是唯一的,用map计数即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> getpr = [&amp;](<span class="type">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;<span class="type">bool</span>&gt; <span class="built_in">not_pr</span>(n + <span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!not_pr[i])</span><br><span class="line">                pr.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> p : pr)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i * p &gt; n)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                not_pr[i * p] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (i % p == <span class="number">0</span>) <span class="comment">// 说明i*p已经被一个更小的i判断过了</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">getpr</span>(<span class="number">450</span>);</span><br><span class="line">    ll n, cnt = <span class="number">0</span>, ans = <span class="number">0</span>, zero = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (!x)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += i - <span class="number">1</span>;</span><br><span class="line">            zero++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += zero;</span><br><span class="line">        ll fac = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">auto</span> chk = [&amp;]() -&gt; <span class="type">void</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> p : pr)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (p &gt; x)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (x % p == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ll num = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (x % p == <span class="number">0</span>)</span><br><span class="line">                        x /= p, num++;</span><br><span class="line">                    <span class="keyword">if</span> (num &amp; <span class="number">1</span>)</span><br><span class="line">                        fac *= p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x &gt; <span class="number">1</span>)</span><br><span class="line">                fac *= x;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">chk</span>();</span><br><span class="line">        ans += mp[fac];</span><br><span class="line">        mp[fac]++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><p>建反图跑最短路</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;array&lt;ll, 5&gt;&gt;&gt; <span class="built_in">e</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll l, d, k, c, a, b;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; d &gt;&gt; k &gt;&gt; c &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        e[b].<span class="built_in">push_back</span>(&#123;l, d, k, c, a&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    priority_queue&lt;pll&gt; pq;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">dis</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">vis</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    dis[n] = <span class="number">2e18</span>;</span><br><span class="line">    pq.<span class="built_in">push</span>(&#123;dis[n], n&#125;);</span><br><span class="line">    <span class="keyword">while</span> (pq.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> [dist, u] = pq.<span class="built_in">top</span>();</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [l, d, k, c, a] : e[u])</span><br><span class="line">        &#123;</span><br><span class="line">            ll lst = (dis[u] - l - c) / d;</span><br><span class="line">            lst = <span class="built_in">min</span>(lst, k - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (l + lst * d &gt; dis[a])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[a] = l + lst * d;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;dis[a], a&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (dis[i] == <span class="number">-1</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Unreachable&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; dis[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><p>概率dp</p>
<p>f[i]表示点数为i是,采取最优策略的获胜概率</p>
<p>每个当前位置有两种情况:</p>
<p>掷色子,$f[i]&#x3D;\sum_{j&#x3D;i+1}^{i+d}f[j]$</p>
<p>不掷骰子,$loss(i)$表示点数为i时,获胜的概率</p>
<p>这个dp明显要倒着处理</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls(x) (a[x].l)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs(x) (a[x].r)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sum(x) a[x].sum</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">100</span>, M = <span class="number">2</span>;</span><br><span class="line">random_device rd;</span><br><span class="line"><span class="function">mt19937_64 <span class="title">gen</span><span class="params">(rd())</span></span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;db&gt; a;</span><br><span class="line">    <span class="built_in">BIT</span>(<span class="type">int</span> _n) : <span class="built_in">n</span>(_n), <span class="built_in">a</span>(n + <span class="number">10</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lb</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, db y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x++;</span><br><span class="line">        <span class="keyword">for</span> (; x &lt;= n; x += <span class="built_in">lb</span>(x))</span><br><span class="line">            a[x] += y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, db x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">add</span>(l, x);</span><br><span class="line">        <span class="built_in">add</span>(r + <span class="number">1</span>, -x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">db <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x++;</span><br><span class="line">        db res = <span class="number">0.</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x; x ^= <span class="built_in">lb</span>(x))</span><br><span class="line">            res += a[x];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, l, d;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; l &gt;&gt; d;</span><br><span class="line">    <span class="function">vector&lt;db&gt; <span class="title">g</span><span class="params">(<span class="number">2</span> * n + <span class="number">10</span>, <span class="number">0.</span>)</span>, <span class="title">f</span><span class="params">(<span class="number">2</span> * n + <span class="number">10</span>, <span class="number">0.</span>)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> lose = [&amp;](<span class="type">int</span> x) -&gt; db</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; n)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.</span>;</span><br><span class="line">        db res = <span class="number">1</span> - g[n];</span><br><span class="line">        <span class="keyword">if</span> (x &gt; l)</span><br><span class="line">            res += g[x - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> cal_g = [&amp;]() -&gt; <span class="type">void</span></span><br><span class="line">    &#123;</span><br><span class="line">        BIT <span class="built_in">bit</span>(<span class="number">2</span> * n);</span><br><span class="line">        bit.<span class="built_in">modify</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            g[i] = bit.<span class="built_in">query</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; l)</span><br><span class="line">            &#123;</span><br><span class="line">                bit.<span class="built_in">modify</span>(i + <span class="number">1</span>, i + d, g[i] / d);</span><br><span class="line">                g[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">            g[i] += g[i - <span class="number">1</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> cal_f = [&amp;]() -&gt; <span class="type">void</span></span><br><span class="line">    &#123;</span><br><span class="line">        db sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span> * n; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; n)</span><br><span class="line">                f[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                f[i] = <span class="built_in">max</span>(sum / d, <span class="built_in">lose</span>(i));</span><br><span class="line">            &#125;</span><br><span class="line">            sum += f[i];</span><br><span class="line">            <span class="keyword">if</span> (i + d &lt;= <span class="number">2</span> * n)</span><br><span class="line">                sum -= f[i + d];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">cal_g</span>();</span><br><span class="line">    <span class="built_in">cal_f</span>();</span><br><span class="line">    cout &lt;&lt; f[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; _;</span></span><br><span class="line">    <span class="keyword">while</span> (_--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><p>建一棵以mulitset作为节点的线段树</p>
<p>操作1就是对节点打标记(不下传)</p>
<p>操作2就是删除标记(暴力删)</p>
<p>操作3从叶子往上走,不断取max即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;multiset&lt;<span class="type">int</span>&gt;&gt; a;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; leaf;</span><br><span class="line">    <span class="built_in">segtree</span>(<span class="type">int</span> _n) : <span class="built_in">n</span>(_n * <span class="number">4</span> + <span class="number">10</span>), <span class="built_in">a</span>(n + <span class="number">1</span>), <span class="built_in">leaf</span>(_n + <span class="number">10</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            leaf[l] = id;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(id * <span class="number">2</span>, l, mid);</span><br><span class="line">            <span class="built_in">build</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; ql || l &gt; qr)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t &gt; <span class="number">0</span>)</span><br><span class="line">                a[id].<span class="built_in">insert</span>(t);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                a[id].<span class="built_in">extract</span>(-t);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            <span class="built_in">modify</span>(id * <span class="number">2</span>, l, mid, ql, qr, t);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            <span class="built_in">modify</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> id = leaf[x];</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (id &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[id].<span class="built_in">size</span>())</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, *a[id].<span class="built_in">rbegin</span>());</span><br><span class="line">            id /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="function">segtree <span class="title">seg</span><span class="params">(n)</span></span>;</span><br><span class="line">    seg.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="type">int</span> opt, l, r, x;</span><br><span class="line">    vector&lt;array&lt;<span class="type">int</span>, 3&gt;&gt; <span class="built_in">op</span>(q + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; opt;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">            seg.<span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x);</span><br><span class="line">            op[i] = &#123;l, r, x&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">auto</span> [l, r, t] = op[x];</span><br><span class="line">            seg.<span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r, -t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">max</span>(a[x], seg.<span class="built_in">query</span>(x)) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进一步优化时间,可以将mulitset优化成一个带修堆</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">heap</span></span><br><span class="line">    &#123;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>&gt; p, q;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            p.<span class="built_in">push</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (p.<span class="built_in">size</span>() &amp;&amp; q.<span class="built_in">size</span>() &amp;&amp; p.<span class="built_in">top</span>() == q.<span class="built_in">top</span>())</span><br><span class="line">                p.<span class="built_in">pop</span>(), q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (p.<span class="built_in">size</span>())</span><br><span class="line">                <span class="keyword">return</span> p.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;heap&gt; a;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; leaf;</span><br><span class="line">    <span class="built_in">segtree</span>(<span class="type">int</span> _n) : <span class="built_in">n</span>(_n * <span class="number">4</span> + <span class="number">10</span>), <span class="built_in">a</span>(n + <span class="number">1</span>), <span class="built_in">leaf</span>(_n + <span class="number">10</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            leaf[l] = id;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(id * <span class="number">2</span>, l, mid);</span><br><span class="line">            <span class="built_in">build</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; ql || l &gt; qr)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t &gt; <span class="number">0</span>)</span><br><span class="line">                a[id].<span class="built_in">push</span>(t);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                a[id].<span class="built_in">del</span>(-t);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">            <span class="built_in">modify</span>(id * <span class="number">2</span>, l, mid, ql, qr, t);</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">            <span class="built_in">modify</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> id = leaf[x];</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (id &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, a[id].<span class="built_in">top</span>());</span><br><span class="line">            id /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="function">segtree <span class="title">seg</span><span class="params">(n)</span></span>;</span><br><span class="line">    seg.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="type">int</span> opt, l, r, x;</span><br><span class="line">    vector&lt;array&lt;<span class="type">int</span>, 3&gt;&gt; <span class="built_in">op</span>(q + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; opt;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">            seg.<span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x);</span><br><span class="line">            op[i] = &#123;l, r, x&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">auto</span> [l, r, t] = op[x];</span><br><span class="line">            seg.<span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r, -t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">max</span>(a[x], seg.<span class="built_in">query</span>(x)) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
  </entry>
  <entry>
    <title>Codeforces Round 931 (Div. 2)</title>
    <url>/2024/03/02/Codeforces%20Round%20931%20(Div.%202)/</url>
    <content><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><p>选择最小和次小,最大和次大,交替放即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">b</span><span class="params">(<span class="number">4</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>());</span><br><span class="line">    b[<span class="number">0</span>] = a[<span class="number">1</span>], b[<span class="number">1</span>] = a[n];</span><br><span class="line">    b[<span class="number">2</span>] = a[<span class="number">2</span>], b[<span class="number">3</span>] = a[n - <span class="number">1</span>];</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        ans += <span class="built_in">abs</span>(b[i] - b[(i - <span class="number">1</span> + <span class="number">4</span>) % <span class="number">4</span>]);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><p>对于小范围暴力跑背包,大范围xian</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls(x) (a[x].l)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs(x) (a[x].r)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sum(x) a[x].sum</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">100</span>, M = <span class="number">25</span>;</span><br><span class="line">random_device rd;</span><br><span class="line"><span class="function">mt19937_64 <span class="title">gen</span><span class="params">(rd())</span></span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>&#125;;</span><br><span class="line">ll f[<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, ans = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">200</span>)</span><br><span class="line">        cout &lt;&lt; f[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans += (n - <span class="number">200</span>) / <span class="number">15</span>;</span><br><span class="line">        n -= ans * <span class="number">15</span>;</span><br><span class="line">        cout &lt;&lt; ans + f[n] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">400</span>; i++)</span><br><span class="line">        f[i] = <span class="number">1e9</span>;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = a[i]; j &lt;= <span class="number">400</span>; j++)</span><br><span class="line">            f[j] = <span class="built_in">min</span>(f[j], f[j - a[i]] + <span class="number">1</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span> (_--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">to be update</span><br></pre></td></tr></table></figure>
<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">to be update</span><br></pre></td></tr></table></figure>
<h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">to be update</span><br></pre></td></tr></table></figure>
<h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">to be update</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
  </entry>
  <entry>
    <title>AtCoder Beginner Contest 343</title>
    <url>/2024/03/02/AtCoder%20Beginner%20Contest%20343/</url>
    <content><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (i != a + b)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">e</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span> (x)</span><br><span class="line">                e[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(e[i].<span class="built_in">begin</span>(), e[i].<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> to : e[i])</span><br><span class="line">            cout &lt;&lt; to &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n, ans = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">auto</span> chk = [&amp;](ll x) -&gt; <span class="type">bool</span></span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">        <span class="keyword">while</span> (x)</span><br><span class="line">            a.<span class="built_in">push_back</span>(x % <span class="number">10</span>), x /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt; j; i++, j--)</span><br><span class="line">            <span class="keyword">if</span> (a[i] != a[j])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i * i * i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">chk</span>(i * i * i))</span><br><span class="line">            ans = i * i * i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, t;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; t;</span><br><span class="line">    multiset&lt;ll&gt; s;</span><br><span class="line">    map&lt;ll, ll&gt; mp;</span><br><span class="line">    mp[<span class="number">0</span>] = n;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">sc</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        mp[sc[a]]--;</span><br><span class="line">        <span class="keyword">if</span> (mp[sc[a]] == <span class="number">0</span>)</span><br><span class="line">            s.<span class="built_in">erase</span>(sc[a]);</span><br><span class="line">        sc[a] += b;</span><br><span class="line">        mp[sc[a]]++;</span><br><span class="line">        <span class="keyword">if</span> (mp[sc[a]] == <span class="number">1</span>)</span><br><span class="line">            s.<span class="built_in">insert</span>(sc[a]);</span><br><span class="line">        cout &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><p>先假设第一个点在(0,0,0)</p>
<p>那么其余两个的范围一定在(-7,7),更大或更小都是一样的</p>
<p>然后暴力枚举计算即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">        cin &gt;&gt; v[i];</span><br><span class="line">    <span class="keyword">auto</span> f2 = [&amp;](<span class="type">int</span> a1, <span class="type">int</span> b1, <span class="type">int</span> c1, <span class="type">int</span> a2, <span class="type">int</span> b2, <span class="type">int</span> c2) -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">min</span>(a1 + <span class="number">7</span>, a2 + <span class="number">7</span>) - <span class="built_in">max</span>(a1, a2));</span><br><span class="line">        <span class="type">int</span> y = <span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">min</span>(b1 + <span class="number">7</span>, b2 + <span class="number">7</span>) - <span class="built_in">max</span>(b1, b2));</span><br><span class="line">        <span class="type">int</span> z = <span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">min</span>(c1 + <span class="number">7</span>, c2 + <span class="number">7</span>) - <span class="built_in">max</span>(c1, c2));</span><br><span class="line">        <span class="keyword">return</span> x * y * z;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> f3 = [&amp;](<span class="type">int</span> a1, <span class="type">int</span> b1, <span class="type">int</span> c1, <span class="type">int</span> a2, <span class="type">int</span> b2, <span class="type">int</span> c2, <span class="type">int</span> a3, <span class="type">int</span> b3, <span class="type">int</span> c3) -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">min</span>(&#123;a1 + <span class="number">7</span>, a2 + <span class="number">7</span>, a3 + <span class="number">7</span>&#125;) - <span class="built_in">max</span>(&#123;a1, a2, a3&#125;));</span><br><span class="line">        <span class="type">int</span> y = <span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">min</span>(&#123;b1 + <span class="number">7</span>, b2 + <span class="number">7</span>, b3 + <span class="number">7</span>&#125;) - <span class="built_in">max</span>(&#123;b1, b2, b3&#125;));</span><br><span class="line">        <span class="type">int</span> z = <span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">min</span>(&#123;c1 + <span class="number">7</span>, c2 + <span class="number">7</span>, c3 + <span class="number">7</span>&#125;) - <span class="built_in">max</span>(&#123;c1, c2, c3&#125;));</span><br><span class="line">        <span class="keyword">return</span> x * y * z;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a2 = <span class="number">-7</span>; a2 &lt;= <span class="number">7</span>; a2++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> b2 = <span class="number">-7</span>; b2 &lt;= <span class="number">7</span>; b2++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c2 = <span class="number">-7</span>; c2 &lt;= <span class="number">7</span>; c2++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> a3 = <span class="number">-7</span>; a3 &lt;= <span class="number">7</span>; a3++)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> b3 = <span class="number">-7</span>; b3 &lt;= <span class="number">7</span>; b3++)</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> c3 = <span class="number">-7</span>; c3 &lt;= <span class="number">7</span>; c3++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="type">int</span> or3 = <span class="built_in">f3</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, a2, b2, c2, a3, b3, c3);</span><br><span class="line">                            <span class="type">int</span> or2 = <span class="built_in">f2</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, a2, b2, c2) + <span class="built_in">f2</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, a3, b3, c3) + <span class="built_in">f2</span>(a3, b3, c3, a2, b2, c2) - <span class="number">3</span> * or3;</span><br><span class="line">                            <span class="type">int</span> or1 = <span class="number">7</span> * <span class="number">7</span> * <span class="number">7</span> * <span class="number">3</span> - <span class="number">2</span> * or2 - <span class="number">3</span> * or3;</span><br><span class="line">                            <span class="keyword">if</span> (v[<span class="number">1</span>] == or1 &amp;&amp; v[<span class="number">2</span>] == or2 &amp;&amp; v[<span class="number">3</span>] == or3)</span><br><span class="line">                            &#123;</span><br><span class="line">                                cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">                                cout &lt;&lt; <span class="string">&quot;0 0 0 &quot;</span> &lt;&lt; a2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a3 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b3 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c3 &lt;&lt; endl;</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><p>用线段树维护最大值和次大值以及它们的数量这四个值,只需要单点修改+区间查询</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls(x) (a[x].l)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs(x) (a[x].r)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sum(x) a[x].sum</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">7e7</span> + <span class="number">10</span>, M = <span class="number">25</span>;</span><br><span class="line">random_device rd;</span><br><span class="line"><span class="function">mt19937_64 <span class="title">gen</span><span class="params">(rd())</span></span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">    &#123;</span><br><span class="line">        array&lt;<span class="type">int</span>, 4&gt; val;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;node&gt; a;</span><br><span class="line">    <span class="built_in">segtree</span>(<span class="type">int</span> _n) : <span class="built_in">n</span>(_n * <span class="number">4</span> + <span class="number">10</span>), <span class="built_in">a</span>(n + <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function">array&lt;<span class="type">int</span>, 4&gt; <span class="title">merge</span><span class="params">(array&lt;<span class="type">int</span>, <span class="number">4</span>&gt; x, array&lt;<span class="type">int</span>, <span class="number">4</span>&gt; y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        array&lt;<span class="type">int</span>, 4&gt; ans = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span> (x[<span class="number">0</span>] &gt; y[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            ans[<span class="number">0</span>] = x[<span class="number">0</span>], ans[<span class="number">1</span>] = x[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (x[<span class="number">2</span>] &gt; y[<span class="number">0</span>])</span><br><span class="line">                ans[<span class="number">2</span>] = x[<span class="number">2</span>], ans[<span class="number">3</span>] = x[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x[<span class="number">2</span>] == y[<span class="number">0</span>])</span><br><span class="line">                ans[<span class="number">2</span>] = x[<span class="number">2</span>], ans[<span class="number">3</span>] = x[<span class="number">3</span>] + y[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans[<span class="number">2</span>] = y[<span class="number">0</span>], ans[<span class="number">3</span>] = y[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x[<span class="number">0</span>] == y[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            ans[<span class="number">0</span>] = x[<span class="number">0</span>], ans[<span class="number">1</span>] = x[<span class="number">1</span>] + y[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (x[<span class="number">2</span>] &gt; y[<span class="number">2</span>])</span><br><span class="line">                ans[<span class="number">2</span>] = x[<span class="number">2</span>], ans[<span class="number">3</span>] = x[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x[<span class="number">2</span>] == y[<span class="number">2</span>])</span><br><span class="line">                ans[<span class="number">2</span>] = x[<span class="number">2</span>], ans[<span class="number">3</span>] = x[<span class="number">3</span>] + y[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans[<span class="number">2</span>] = y[<span class="number">2</span>], ans[<span class="number">3</span>] = y[<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans[<span class="number">0</span>] = y[<span class="number">0</span>], ans[<span class="number">1</span>] = y[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (x[<span class="number">0</span>] &gt; y[<span class="number">2</span>])</span><br><span class="line">                ans[<span class="number">2</span>] = x[<span class="number">0</span>], ans[<span class="number">3</span>] = x[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x[<span class="number">0</span>] == y[<span class="number">2</span>])</span><br><span class="line">                ans[<span class="number">2</span>] = x[<span class="number">0</span>], ans[<span class="number">3</span>] = x[<span class="number">1</span>] + y[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans[<span class="number">2</span>] = y[<span class="number">2</span>], ans[<span class="number">3</span>] = y[<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a[id].val = <span class="built_in">merge</span>(a[id * <span class="number">2</span>].val, a[id * <span class="number">2</span> + <span class="number">1</span>].val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, vector&lt;<span class="type">int</span>&gt; &amp;arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            a[id].val = &#123;arr[l], <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(id * <span class="number">2</span>, l, mid, arr);</span><br><span class="line">            <span class="built_in">build</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, arr);</span><br><span class="line">            <span class="built_in">update</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="comment">// 叶子节点</span></span><br><span class="line">            a[id].val[<span class="number">0</span>] = t;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (pos &lt;= mid)</span><br><span class="line">                <span class="built_in">change</span>(id * <span class="number">2</span>, l, mid, pos, t);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">change</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, pos, t);</span><br><span class="line">            <span class="built_in">update</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">array&lt;<span class="type">int</span>, 4&gt; <span class="title">query</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; ql || l &gt; qr)</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr)</span><br><span class="line">            <span class="keyword">return</span> a[id].val;</span><br><span class="line">        array&lt;<span class="type">int</span>, 4&gt; ans = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ql &lt;= mid)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> res = <span class="built_in">query</span>(id * <span class="number">2</span>, l, mid, ql, qr);</span><br><span class="line">            ans = <span class="built_in">merge</span>(ans, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (qr &gt; mid)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> res = <span class="built_in">query</span>(id * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">            ans = <span class="built_in">merge</span>(ans, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="function">segtree <span class="title">seg</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    seg.<span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n, a);</span><br><span class="line">    <span class="type">int</span> opt, l, r;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; opt &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">            seg.<span class="built_in">change</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> res = seg.<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</span><br><span class="line">            cout &lt;&lt; res[<span class="number">3</span>] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; setprecision(5);</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; _;</span></span><br><span class="line">    <span class="keyword">while</span> (_--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">to be update</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
  </entry>
  <entry>
    <title>牛客练习赛122</title>
    <url>/2024/03/03/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B122/</url>
    <content><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">to be update</span><br></pre></td></tr></table></figure>
<h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">to be update</span><br></pre></td></tr></table></figure>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">to be update</span><br></pre></td></tr></table></figure>
<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">to be update</span><br></pre></td></tr></table></figure>
<h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">to be update</span><br></pre></td></tr></table></figure>
<h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">to be update</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nowcoder</category>
      </categories>
  </entry>
</search>
